/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.salesmate.component;

import com.salesmate.controller.ProductController;
import com.salesmate.model.Product;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.math.BigDecimal;
import java.util.List;

/**
 *
 * @author meiln
 */
public class AdProductPanel extends javax.swing.JPanel {

    private JTable productTable;
    private DefaultTableModel tableModel;
    private ProductController productController;
    private JPanel tablePanel;
    private JPanel reportPanel;

    /**
     * Creates new form AdProductPanel
     */
    public AdProductPanel() {
        initComponents();
        productController = new ProductController();
        loadProducts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setLayout(new BorderLayout());

        // Tạo JTabbedPane
        JTabbedPane tabbedPane = new JTabbedPane();

        // Tab Table (CRUD)
        tablePanel = new JPanel(new BorderLayout());
        initTablePanel();
        tabbedPane.addTab("Table", tablePanel);

        // Tab Report (Lọc)
        reportPanel = new JPanel(new BorderLayout());
        initReportPanel();
        tabbedPane.addTab("Report", reportPanel);

        add(tabbedPane, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initTablePanel() {
        // Bảng hiển thị sản phẩm
        tableModel = new DefaultTableModel(new Object[]{"ID", "Tên sản phẩm", "Giá", "Số lượng"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Không cho phép chỉnh sửa trực tiếp trên bảng
            }
        };
        productTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(productTable);
        tablePanel.add(scrollPane, BorderLayout.CENTER);

        // Panel chứa các nút CRUD
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton addButton = new JButton("Thêm");
        JButton editButton = new JButton("Sửa");
        JButton deleteButton = new JButton("Xóa");

        addButton.addActionListener(e -> addProduct());
        editButton.addActionListener(e -> editProduct());
        deleteButton.addActionListener(e -> deleteProduct());

        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        tablePanel.add(buttonPanel, BorderLayout.SOUTH);
    }

    private void initReportPanel() {
        // Bộ lọc
        JPanel filterPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JComboBox<String> statusFilter = new JComboBox<>(new String[]{"Tất cả", "Còn hàng (≥ 10)", "Sắp hết (< 10)", "Hết hàng (0)"});
        JButton applyFilterButton = new JButton("Lọc");

        filterPanel.add(new JLabel("Trạng thái:"));
        filterPanel.add(statusFilter);
        filterPanel.add(applyFilterButton);

        reportPanel.add(filterPanel, BorderLayout.NORTH);

        // Bảng hiển thị kết quả lọc
        JTable reportTable = new JTable(new DefaultTableModel(new Object[]{"ID", "Tên sản phẩm", "Giá", "Số lượng"}, 0));
        JScrollPane reportScrollPane = new JScrollPane(reportTable);
        reportPanel.add(reportScrollPane, BorderLayout.CENTER);

        // Xử lý sự kiện lọc
        applyFilterButton.addActionListener(e -> {
            String selectedFilter = (String) statusFilter.getSelectedItem();
            List<Product> products = productController.getAllProducts();

            if ("Còn hàng (≥ 10)".equals(selectedFilter)) {
                products.removeIf(p -> p.getQuantity() < 10);
            } else if ("Sắp hết (< 10)".equals(selectedFilter)) {
                products.removeIf(p -> p.getQuantity() >= 10 || p.getQuantity() == 0);
            } else if ("Hết hàng (0)".equals(selectedFilter)) {
                products.removeIf(p -> p.getQuantity() > 0);
            }

            // Cập nhật bảng kết quả lọc
            DefaultTableModel reportTableModel = (DefaultTableModel) reportTable.getModel();
            reportTableModel.setRowCount(0); // Xóa dữ liệu cũ
            for (Product product : products) {
                reportTableModel.addRow(new Object[]{
                        product.getProductId(),
                        product.getProductName(),
                        product.getPrice(),
                        product.getQuantity()
                });
            }
        });
    }

    private void loadProducts() {
        List<Product> products = productController.getAllProducts();
        updateTable(products);
    }

    private void updateTable(List<Product> products) {
        tableModel.setRowCount(0); // Xóa dữ liệu cũ
        for (Product product : products) {
            tableModel.addRow(new Object[]{
                    product.getProductId(),
                    product.getProductName(),
                    product.getPrice(),
                    product.getQuantity()
            });
        }
    }

    private void addProduct() {
        // Hiển thị form thêm sản phẩm
        String name = JOptionPane.showInputDialog(this, "Nhập tên sản phẩm:");
        if (name == null || name.trim().isEmpty()) return;

        String priceStr = JOptionPane.showInputDialog(this, "Nhập giá sản phẩm:");
        BigDecimal price;
        try {
            price = new BigDecimal(priceStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String quantityStr = JOptionPane.showInputDialog(this, "Nhập số lượng:");
        int quantity;
        try {
            quantity = Integer.parseInt(quantityStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số lượng không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Product product = new Product(0, name, price, quantity, null, null);
        if (productController.addProduct(product)) {
            JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công!");
            loadProducts();
        } else {
            JOptionPane.showMessageDialog(this, "Thêm sản phẩm thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void editProduct() {
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để sửa!");
            return;
        }

        int productId = (int) tableModel.getValueAt(selectedRow, 0);
        String name = JOptionPane.showInputDialog(this, "Nhập tên sản phẩm mới:", tableModel.getValueAt(selectedRow, 1));
        if (name == null || name.trim().isEmpty()) return;

        String priceStr = JOptionPane.showInputDialog(this, "Nhập giá sản phẩm mới:", tableModel.getValueAt(selectedRow, 2));
        BigDecimal price;
        try {
            price = new BigDecimal(priceStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String quantityStr = JOptionPane.showInputDialog(this, "Nhập số lượng mới:", tableModel.getValueAt(selectedRow, 3));
        int quantity;
        try {
            quantity = Integer.parseInt(quantityStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số lượng không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Product product = new Product(productId, name, price, quantity, null, null);
        if (productController.updateProduct(product)) {
            JOptionPane.showMessageDialog(this, "Cập nhật sản phẩm thành công!");
            loadProducts();
        } else {
            JOptionPane.showMessageDialog(this, "Cập nhật sản phẩm thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteProduct() {
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để xóa!");
            return;
        }

        int productId = (int) tableModel.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa sản phẩm này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            if (productController.deleteProduct(productId)) {
                JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!");
                loadProducts();
            } else {
                JOptionPane.showMessageDialog(this, "Xóa sản phẩm thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
