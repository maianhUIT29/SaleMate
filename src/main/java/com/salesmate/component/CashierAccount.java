/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.salesmate.component;

import com.salesmate.controller.UserController;
import com.salesmate.model.User;
import com.salesmate.utils.SessionManager;

import javax.swing.JOptionPane;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.Color;
import java.awt.Font;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GradientPaint;
import java.awt.RenderingHints;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Dimension;
import java.awt.FlowLayout;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import javax.swing.JPanel;
import javax.swing.JDialog;

/**
 *
 * @author Nhan
 */
public class CashierAccount extends javax.swing.JPanel {

    private final UserController userController;
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    private String selectedAvatarPath = null;
    private int avatarSize = 250; // Default avatar size updated to 250x250

    private static final Color PRIMARY_COLOR = new Color(52, 152, 219);  // Professional blue
    private static final Color SECONDARY_COLOR = new Color(236, 240, 241);  // Light gray background
    private static final Color SUCCESS_COLOR = new Color(46, 204, 113);  // Green
    private static final Color DANGER_COLOR = new Color(231, 76, 60);    // Red
    private static final Color TEXT_COLOR = new Color(44, 62, 80);       // Dark text
    private static final Font HEADER_FONT = new Font("Segoe UI", Font.BOLD, 24);
    private static final Font LABEL_FONT = new Font("Segoe UI", Font.BOLD, 14);
    private static final Font INPUT_FONT = new Font("Segoe UI", Font.PLAIN, 14);

    /**
     * Creates new form CashierAccount
     */
    public CashierAccount() {
        initComponents();
        userController = new UserController();

        // Load user data after initialization
        loadUserData(); // Load user data right after initialization

        // Add a ComponentListener to ensure the avatar is resized after rendering
        lblAvatar.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                resizeAvatar();
            }
        });

        // Add a MouseWheelListener to handle zoom functionality
        lblAvatar.addMouseWheelListener(new MouseWheelListener() {
            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                int notches = e.getWheelRotation();
                if (notches < 0) {
                    avatarSize += 10; // Zoom in
                } else if (notches > 0 && avatarSize > 50) {
                    avatarSize -= 10; // Zoom out (minimum size 50x50)
                }
                resizeAvatar(); // Ensure the avatar is resized dynamically
            }
        });

        // Add action listener for password reset button
        btnResetPW.addActionListener(e -> showPasswordChangeDialog());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConfirmUpdateDialog = new javax.swing.JDialog();
        AccountPanel = new javax.swing.JPanel();
        UserInfoPanel = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        txtCCCD = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lblPW = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        HeaderSPR = new javax.swing.JSeparator();
        lblUserHeader = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblCCCD = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        txtPW = new javax.swing.JPasswordField();
        InfoSPR = new javax.swing.JSeparator();
        btnResetPW = new javax.swing.JButton();
        UserAvatarPanel = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        lblCreateAt = new javax.swing.JLabel();
        AvatarSpt = new javax.swing.JSeparator();
        lblCreateAtValue = new javax.swing.JLabel();
        lblStatusValue = new javax.swing.JLabel();
        btnUpdateAvatar = new javax.swing.JButton();
        lblAvatar = new javax.swing.JLabel();

        javax.swing.GroupLayout ConfirmUpdateDialogLayout = new javax.swing.GroupLayout(ConfirmUpdateDialog.getContentPane());
        ConfirmUpdateDialog.getContentPane().setLayout(ConfirmUpdateDialogLayout);
        ConfirmUpdateDialogLayout.setHorizontalGroup(
            ConfirmUpdateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        ConfirmUpdateDialogLayout.setVerticalGroup(
            ConfirmUpdateDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setLayout(new java.awt.BorderLayout());

        AccountPanel.setBackground(new java.awt.Color(220, 240, 242));

        UserInfoPanel.setBackground(new java.awt.Color(255, 255, 255));
        UserInfoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblUsername.setBackground(new java.awt.Color(241, 241, 241));
        lblUsername.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblUsername.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUsername.setText("Tên người dùng");

        txtCCCD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtCCCD.setText("0123456789");
        txtCCCD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCCCDActionPerformed(evt);
            }
        });

        lblEmail.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblEmail.setText("Email");

        txtUsername.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtUsername.setText("Unknown");
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtEmail.setText("Forexample@gmail.com");

        lblPW.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblPW.setText("Mật khẩu");

        btnUpdate.setBackground(new java.awt.Color(51, 153, 255));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setText("Cập nhật");

        btnSave.setBackground(new java.awt.Color(40, 167, 69));
        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Lưu");

        lblUserHeader.setBackground(new java.awt.Color(51, 204, 255));
        lblUserHeader.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblUserHeader.setForeground(new java.awt.Color(51, 204, 255));
        lblUserHeader.setText("THÔNG TIN TÀI KHOẢN");

        lblDOB.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblDOB.setText("Ngày sinh");

        lblCCCD.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblCCCD.setText("CCCD");

        txtDOB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtDOB.setText("01/01/2003");
        txtDOB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDOBActionPerformed(evt);
            }
        });

        txtPW.setText("jPasswordField1");

        btnResetPW.setBackground(new java.awt.Color(255, 0, 51));
        btnResetPW.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnResetPW.setForeground(new java.awt.Color(255, 255, 255));
        btnResetPW.setText("Đổi mật khẩu");

        javax.swing.GroupLayout UserInfoPanelLayout = new javax.swing.GroupLayout(UserInfoPanel);
        UserInfoPanel.setLayout(UserInfoPanelLayout);
        UserInfoPanelLayout.setHorizontalGroup(
            UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserInfoPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HeaderSPR)
                    .addComponent(InfoSPR, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserInfoPanelLayout.createSequentialGroup()
                        .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCCCD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCCCD)
                            .addComponent(txtEmail)
                            .addComponent(txtPW)
                            .addComponent(txtDOB)
                            .addComponent(txtUsername)))
                    .addGroup(UserInfoPanelLayout.createSequentialGroup()
                        .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UserInfoPanelLayout.createSequentialGroup()
                                .addComponent(lblUserHeader)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserInfoPanelLayout.createSequentialGroup()
                                .addGap(189, 189, 189)
                                .addComponent(btnResetPW, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        UserInfoPanelLayout.setVerticalGroup(
            UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserInfoPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblUserHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HeaderSPR)
                .addGap(3, 3, 3)
                .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserInfoPanelLayout.createSequentialGroup()
                        .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(17, 17, 17))
                    .addGroup(UserInfoPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserInfoPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserInfoPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtPW, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblPW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserInfoPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCCCD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCCCD, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addComponent(InfoSPR, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnResetPW, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );

        UserAvatarPanel.setBackground(new java.awt.Color(255, 255, 255));
        UserAvatarPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lblStatus.setText("Trạng thái");

        lblCreateAt.setText("Ngày tạo");

        lblCreateAtValue.setText("01/01/2003");

        lblStatusValue.setText("Hoạt động");

        btnUpdateAvatar.setBackground(java.awt.SystemColor.textHighlight);
        btnUpdateAvatar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnUpdateAvatar.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateAvatar.setText("Đổi ảnh đại diện");

        lblAvatar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAvatar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/avt/N (2).jpg"))); // NOI18N

        javax.swing.GroupLayout UserAvatarPanelLayout = new javax.swing.GroupLayout(UserAvatarPanel);
        UserAvatarPanel.setLayout(UserAvatarPanelLayout);
        UserAvatarPanelLayout.setHorizontalGroup(
            UserAvatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserAvatarPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(UserAvatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAvatar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(AvatarSpt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnUpdateAvatar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(UserAvatarPanelLayout.createSequentialGroup()
                        .addGroup(UserAvatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UserAvatarPanelLayout.createSequentialGroup()
                                .addComponent(lblCreateAt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(9, 9, 9))
                            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UserAvatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCreateAtValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStatusValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(30, 30, 30))
        );
        UserAvatarPanelLayout.setVerticalGroup(
            UserAvatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserAvatarPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblAvatar, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(btnUpdateAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(AvatarSpt, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(UserAvatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCreateAtValue)
                    .addComponent(lblCreateAt))
                .addGap(6, 6, 6)
                .addGroup(UserAvatarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(lblStatusValue))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout AccountPanelLayout = new javax.swing.GroupLayout(AccountPanel);
        AccountPanel.setLayout(AccountPanelLayout);
        AccountPanelLayout.setHorizontalGroup(
            AccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(UserAvatarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(UserInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        AccountPanelLayout.setVerticalGroup(
            AccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(AccountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UserAvatarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        add(AccountPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDOBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDOBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDOBActionPerformed

    private void txtCCCDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCCCDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCCCDActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {
        updateUserData(); // Save updated user data when the Save button is clicked
    }

    private void btnResetPWActionPerformed(java.awt.event.ActionEvent evt) {
        showPasswordChangeDialog();
    }

    private void resizeAvatar() {
        if (lblAvatar.getWidth() > 0 && lblAvatar.getHeight() > 0) {
            ImageIcon originalIcon = null;

            if (selectedAvatarPath != null) {
                originalIcon = new ImageIcon(selectedAvatarPath);
            } else {
                User loggedInUser = SessionManager.getInstance().getLoggedInUser();
                if (loggedInUser != null && loggedInUser.getAvatar() != null) {
                    originalIcon = new ImageIcon(getClass().getResource("/img/avt/" + loggedInUser.getAvatar()));
                }
            }

            if (originalIcon != null) {
                Image resizedImage = originalIcon.getImage().getScaledInstance(avatarSize, avatarSize, Image.SCALE_SMOOTH);
                lblAvatar.setIcon(new ImageIcon(resizedImage));
            }
        }
    }

    private void loadUserData() {
        User loggedInUser = SessionManager.getInstance().getLoggedInUser();
        if (loggedInUser != null) {
            txtUsername.setText(loggedInUser.getUsername());
            txtEmail.setText(loggedInUser.getEmail());
            txtDOB.setText(loggedInUser.getCreatedAt() != null ? dateFormat.format(loggedInUser.getCreatedAt()) : "");
            txtCCCD.setText(loggedInUser.getStatus());
            lblStatusValue.setText(loggedInUser.getStatus());
            lblCreateAtValue.setText(loggedInUser.getCreatedAt() != null ? dateFormat.format(loggedInUser.getCreatedAt()) : "");
            
            // Load avatar
            if (loggedInUser.getAvatar() != null) {
                try {
                    ImageIcon originalIcon = new ImageIcon(getClass().getResource("/img/avt/" + loggedInUser.getAvatar()));
                    Image resizedImage = originalIcon.getImage().getScaledInstance(avatarSize, avatarSize, Image.SCALE_SMOOTH);
                    lblAvatar.setIcon(new ImageIcon(resizedImage));
                } catch (Exception e) {
                    System.err.println("Error loading avatar: " + e.getMessage());
                    lblAvatar.setIcon(new ImageIcon(getClass().getResource("/img/avt/default.jpg")));
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No user is logged in.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnUpdateAvatarActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            selectedAvatarPath = selectedFile.getAbsolutePath();
            resizeAvatar();
        }
    }

    private void updateUserData() {
        User loggedInUser = SessionManager.getInstance().getLoggedInUser();
        if (loggedInUser != null) {
            loggedInUser.setUsername(txtUsername.getText());
            loggedInUser.setEmail(txtEmail.getText());
            loggedInUser.setStatus(txtCCCD.getText());

            if (selectedAvatarPath != null) {
                try {
                    String avatarFileName = new File(selectedAvatarPath).getName();
                    File destination = new File(getClass().getResource("/img/avt/").getPath() + avatarFileName);
                    Files.copy(new File(selectedAvatarPath).toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);
                    loggedInUser.setAvatar(avatarFileName);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Failed to update avatar.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            boolean isUpdated = userController.updateUser(loggedInUser);
            if (isUpdated) {
                JOptionPane.showMessageDialog(this, "User information updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update user information.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No user is logged in.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void styleButton(JButton button, Color baseColor) {
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(baseColor.darker());
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(baseColor);
            }
        });
        button.setFocusPainted(false);
        button.setBorderPainted(false);
    }

    private JButton createStyledButton(String text, Color baseColor) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.BOLD, 14));
        button.setBackground(baseColor);
        button.setForeground(Color.WHITE);
        styleButton(button, baseColor);
        return button;
    }

    private JDialog createStyledDialog(String title, int width, int height) {
        JDialog dialog = new JDialog();
        dialog.setTitle(title);
        dialog.setModal(true);
        dialog.setSize(width, height);
        dialog.setLocationRelativeTo(this);
        dialog.getRootPane().setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        return dialog;
    }

    private void showPasswordChangeDialog() {
        JDialog dialog = new JDialog();
        dialog.setTitle("Đổi mật khẩu");
        dialog.setModal(true);
        dialog.setSize(400, 300);
        dialog.setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                int w = getWidth(), h = getHeight();
                GradientPaint gp = new GradientPaint(
                    0, 0, new Color(240, 248, 255),
                    0, h, Color.WHITE
                );
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, w, h);
            }
        };
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 25, 20, 25));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10);

        // Create password fields
        JLabel lblOldPass = new JLabel("Mật khẩu cũ:");
        JPasswordField txtOldPass = new JPasswordField();
        JLabel lblNewPass = new JLabel("Mật khẩu mới:");
        JPasswordField txtNewPass = new JPasswordField();
        JLabel lblConfirmPass = new JLabel("Xác nhận mật khẩu:");
        JPasswordField txtConfirmPass = new JPasswordField();

        // Style components
        Font labelFont = new Font("Segoe UI", Font.BOLD, 14);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 14);
        Color textColor = new Color(51, 51, 51);

        for (JLabel lbl : new JLabel[]{lblOldPass, lblNewPass, lblConfirmPass}) {
            lbl.setFont(labelFont);
            lbl.setForeground(textColor);
        }

        for (JPasswordField field : new JPasswordField[]{txtOldPass, txtNewPass, txtConfirmPass}) {
            field.setFont(fieldFont);
            field.setPreferredSize(new Dimension(200, 35));
        }

        // Add components to panel
        gbc.gridx = 0; gbc.gridy = 0;
        mainPanel.add(lblOldPass, gbc);
        
        gbc.gridx = 1;
        mainPanel.add(txtOldPass, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        mainPanel.add(lblNewPass, gbc);
        
        gbc.gridx = 1;
        mainPanel.add(txtNewPass, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        mainPanel.add(lblConfirmPass, gbc);
        
        gbc.gridx = 1;
        mainPanel.add(txtConfirmPass, gbc);

        // Create button panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 0));
        buttonPanel.setOpaque(false);

        // Style buttons
        JButton btnChange = new JButton("Đổi mật khẩu");
        btnChange.setBackground(new Color(40, 167, 69));
        btnChange.setForeground(Color.WHITE);
        btnChange.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnChange.setFocusPainted(false);
        btnChange.setBorderPainted(false);
        btnChange.setCursor(new Cursor(Cursor.HAND_CURSOR));

        JButton btnCancel = new JButton("Huỷ");
        btnCancel.setBackground(new Color(220, 53, 69));
        btnCancel.setForeground(Color.WHITE);
        btnCancel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnCancel.setFocusPainted(false);
        btnCancel.setBorderPainted(false);
        btnCancel.setCursor(new Cursor(Cursor.HAND_CURSOR));

        buttonPanel.add(btnChange);
        buttonPanel.add(btnCancel);

        gbc.gridx = 0; gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(20, 10, 10, 10);
        mainPanel.add(buttonPanel, gbc);

        // Add button actions
        btnChange.addActionListener(e -> {
            String oldPass = new String(txtOldPass.getPassword());
            String newPass = new String(txtNewPass.getPassword());
            String confirmPass = new String(txtConfirmPass.getPassword());

            if (!newPass.equals(confirmPass)) {
                JOptionPane.showMessageDialog(dialog,
                    "Mật khẩu mới và xác nhận không khớp!",
                    "Lỗi",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            User user = SessionManager.getInstance().getLoggedInUser();
            if (userController.resetPassword(user.getEmail(), oldPass, newPass)) {
                JOptionPane.showMessageDialog(dialog,
                    "Đổi mật khẩu thành công!",
                    "Thành công",
                    JOptionPane.INFORMATION_MESSAGE);
                dialog.dispose();
            } else {
                JOptionPane.showMessageDialog(dialog,
                    "Mật khẩu cũ không đúng!",
                    "Lỗi",
                    JOptionPane.ERROR_MESSAGE);
            }
        });

        btnCancel.addActionListener(e -> dialog.dispose());

        dialog.add(mainPanel);
        dialog.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AccountPanel;
    private javax.swing.JSeparator AvatarSpt;
    private javax.swing.JDialog ConfirmUpdateDialog;
    private javax.swing.JSeparator HeaderSPR;
    private javax.swing.JSeparator InfoSPR;
    private javax.swing.JPanel UserAvatarPanel;
    private javax.swing.JPanel UserInfoPanel;
    private javax.swing.JButton btnResetPW;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateAvatar;
    private javax.swing.JLabel lblAvatar;
    private javax.swing.JLabel lblCCCD;
    private javax.swing.JLabel lblCreateAt;
    private javax.swing.JLabel lblCreateAtValue;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblPW;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatusValue;
    private javax.swing.JLabel lblUserHeader;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextField txtCCCD;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JPasswordField txtPW;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
