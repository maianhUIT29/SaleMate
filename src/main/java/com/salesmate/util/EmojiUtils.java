package com.salesmate.util;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Utility class for finding and using emoji-compatible fonts
 */
public class EmojiUtils {
    
    // Danh s√°ch c√°c font c√≥ h·ªó tr·ª£ emoji t·ªët theo th·ª© t·ª± ∆∞u ti√™n
    private static final String[] EMOJI_FONT_NAMES = {
        "Segoe UI Emoji",   // Windows
        "Apple Color Emoji", // macOS
        "Noto Color Emoji",  // Linux
        "Noto Emoji",
        "Segoe UI Symbol",
        "Symbola",
        "DejaVu Sans"
    };
    
    /**
     * T√¨m font ph√π h·ª£p nh·∫•t cho vi·ªác hi·ªÉn th·ªã emoji tr√™n UI
     */
    public static Font getEmojiFontForUI(float size, int style) {
        Font bestFont = null;
        
        try {
            // Danh s√°ch c√°c font c√≥ s·∫µn trong h·ªá th·ªëng
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            List<Font> availableFonts = new ArrayList<>(Arrays.asList(ge.getAllFonts()));
            
            // Th√™m c√°c font c√≥ s·∫µn trong JRE
            availableFonts.add(new Font(Font.SANS_SERIF, style, (int)size));
            availableFonts.add(new Font(Font.DIALOG, style, (int)size));
            
            // T√¨m font emoji ph√π h·ª£p ƒë·∫ßu ti√™n
            for (String fontName : EMOJI_FONT_NAMES) {
                for (Font font : availableFonts) {
                    String name = font.getFontName().toLowerCase();
                    if (name.contains(fontName.toLowerCase())) {
                        bestFont = font.deriveFont(style, size);
                        System.out.println("Found emoji font: " + font.getFontName());
                        break;
                    }
                }
                if (bestFont != null) break;
            }
            
            // N·∫øu kh√¥ng t√¨m th·∫•y font emoji n√†o, th·ª≠ ƒëƒÉng k√Ω font t·ª´ h·ªá th·ªëng
            if (bestFont == null) {
                for (String fontName : EMOJI_FONT_NAMES) {
                    try {
                        bestFont = new Font(fontName, style, (int)size);
                        if (!bestFont.getFontName().equals(fontName)) {
                            bestFont = null; // Font kh√¥ng kh·ªõp v·ªõi t√™n, JRE ƒë√£ thay th·∫ø b·∫±ng font fallback
                        } else {
                            System.out.println("Registered emoji font: " + fontName);
                            break;
                        }
                    } catch (Exception e) {
                        // Font kh√¥ng t·ªìn t·∫°i, ti·∫øp t·ª•c t√¨m
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("Error finding emoji font: " + e.getMessage());
        }
        
        // Fallback v·ªÅ font Dialog n·∫øu kh√¥ng t√¨m th·∫•y font emoji n√†o
        if (bestFont == null) {
            bestFont = new Font(Font.DIALOG, style, (int)size);
            System.out.println("Using fallback font: " + bestFont.getFontName());
        }
        
        return bestFont;
    }
    
    /**
     * Ki·ªÉm tra xem m·ªôt k√Ω t·ª± c√≥ ph·∫£i l√† emoji hay kh√¥ng
     */
    public static boolean isEmoji(char c) {
        return c == 0x1F60A || // üòä - smiling face with smiling eyes
               c == 0x1F603 || // üòÉ - smiling face with open mouth
               c == 0x1F609 || // üòâ - winking face
               c == 0x1F614 || // üòî - pensive face
               c == 0x1F61B || // üòõ - face with stuck-out tongue
               c == 0x1F62E || // üòÆ - face with open mouth
               (c >= 0x1F600 && c <= 0x1F64F) || // Emoticons
               (c >= 0x1F300 && c <= 0x1F5FF) || // Misc Symbols and Pictographs
               (c >= 0x1F680 && c <= 0x1F6FF) || // Transport and Map
               (c >= 0x2600 && c <= 0x26FF) ||   // Misc symbols
               (c >= 0x2700 && c <= 0x27BF) ||   // Dingbats
               (c >= 0xFE00 && c <= 0xFE0F) ||   // Variation Selectors
               (c >= 0x1F900 && c <= 0x1F9FF) || // Supplemental Symbols and Pictographs
               (c >= 0x1F1E6 && c <= 0x1F1FF);   // Flags
    }
    
    /**
     * Ki·ªÉm tra xem m·ªôt chu·ªói c√≥ ch·ª©a emoji kh√¥ng
     */
    public static boolean containsEmoji(String text) {
        for (int i = 0; i < text.length(); i++) {
            if (isEmoji(text.charAt(i))) {
                return true;
            }
        }
        return false;
    }
}
