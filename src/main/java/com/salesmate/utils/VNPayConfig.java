package com.salesmate.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class VNPayConfig {
    // VNPay configuration constants
    public static final String MERCHANT_ID;
    public static final String SECRET_KEY;
    public static final String API_URL;
    public static final String RETURN_URL;
    public static final String VERSION;
    public static final String COMMAND;
    public static final String ORDER_TYPE;
    public static final String LOCALE;
    public static final String CURRENCY_CODE;
    
    // Load configuration from properties file
    static {
        Properties props = new Properties();
        
        // **C·∫¢I THI·ªÜN**: Th·ª≠ nhi·ªÅu v·ªã tr√≠ ƒë·ªÉ t√¨m config.properties
        boolean configLoaded = false;
        String configSource = "";
        
        // 1. Th·ª≠ load t·ª´ classpath (resources folder)
        try (InputStream input = VNPayConfig.class.getClassLoader().getResourceAsStream("config.properties")) {
            if (input != null) {
                props.load(input);
                configLoaded = true;
                configSource = "classpath:/config.properties";
                System.out.println("Loaded config from classpath: /src/main/resources/config.properties");
            }
        } catch (IOException e) {
            System.out.println("Cannot load from classpath: " + e.getMessage());
        }
        
        // 2. N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ load t·ª´ th∆∞ m·ª•c g·ªëc d·ª± √°n
        if (!configLoaded) {
            String[] possiblePaths = {
                "config.properties",                           // Th∆∞ m·ª•c g·ªëc
                "src/main/resources/config.properties",       // Maven structure
                "../config.properties",                       // Parent directory
                "../../config.properties"                     // Grandparent directory
            };
            
            for (String path : possiblePaths) {
                File configFile = new File(path);
                if (configFile.exists() && configFile.isFile()) {
                    try (FileInputStream fis = new FileInputStream(configFile)) {
                        props.load(fis);
                        configLoaded = true;
                        configSource = configFile.getAbsolutePath();
                        System.out.println("‚úÖ Loaded config from file: " + configSource);
                        break;
                    } catch (IOException e) {
                        System.out.println("‚ùå Cannot load from " + path + ": " + e.getMessage());
                    }
                }
            }
        }
        
        // 3. N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, b√°o l·ªói v√† s·ª≠ d·ª•ng default values
        if (!configLoaded) {
            System.err.println("üö® C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y file config.properties!");
            System.err.println("üìÅ Vui l√≤ng ƒë·∫∑t file config.properties v√†o m·ªôt trong c√°c v·ªã tr√≠:");
            System.err.println("   - src/main/resources/config.properties (khuy·∫øn ngh·ªã)");
            System.err.println("   - config.properties (th∆∞ m·ª•c g·ªëc d·ª± √°n)");
            System.err.println("üîß S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh...");
            
            // Set default properties
            props.setProperty("vnpay.merchant_id", "WTOPNN81");
            props.setProperty("vnpay.secret_key", "O2LXOBSIGEC2UKBW1QTZSO2EO49M6X87");
            props.setProperty("vnpay.api_url", "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html");
            props.setProperty("vnpay.return_url", "http://localhost:8080/vnpay-return");
            props.setProperty("vnpay.version", "2.1.0");
            props.setProperty("vnpay.command", "pay");
            props.setProperty("vnpay.order_type", "other");
            props.setProperty("vnpay.locale", "vn");
            props.setProperty("vnpay.currency_code", "VND");
        }
        
        // Load VNPay settings from properties v·ªõi default values
        MERCHANT_ID = props.getProperty("vnpay.merchant_id", "").trim();
        SECRET_KEY = props.getProperty("vnpay.secret_key", "").trim();
        API_URL = props.getProperty("vnpay.api_url", "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html").trim();
        RETURN_URL = props.getProperty("vnpay.return_url", "http://localhost:8080/vnpay-return").trim();
        VERSION = props.getProperty("vnpay.version", "2.1.0").trim();
        COMMAND = props.getProperty("vnpay.command", "pay").trim();
        ORDER_TYPE = props.getProperty("vnpay.order_type", "other").trim();
        LOCALE = props.getProperty("vnpay.locale", "vn").trim();
        CURRENCY_CODE = props.getProperty("vnpay.currency_code", "VND").trim();
        
        // Validate required fields
        if (MERCHANT_ID.isEmpty() || SECRET_KEY.isEmpty()) {
            System.err.println("C·∫¢NH B√ÅO NGHI√äM TR·ªåNG: VNPay MERCHANT_ID ho·∫∑c SECRET_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!");
            System.err.println("MERCHANT_ID: " + (MERCHANT_ID.isEmpty() ? "CH∆ØA C·∫§U H√åNH" : "ƒê√É C·∫§U H√åNH"));
            System.err.println("SECRET_KEY: " + (SECRET_KEY.isEmpty() ? "CH∆ØA C·∫§U H√åNH" : "ƒê√É C·∫§U H√åNH"));
            System.err.println("VNPay s·∫Ω kh√¥ng ho·∫°t ƒë·ªông n·∫øu thi·∫øu th√¥ng tin n√†y!");
        }
        
        // Debug output
        System.out.println("=== VNPay Configuration Loaded ===");
        System.out.println("Config source: " + (configLoaded ? configSource : "DEFAULT VALUES"));
        System.out.println("MERCHANT_ID: " + (MERCHANT_ID.isEmpty() ? "NOT SET" : MERCHANT_ID));
        System.out.println("SECRET_KEY: " + (SECRET_KEY.isEmpty() ? "NOT SET" : "SET (hidden)"));
        System.out.println("API_URL: " + API_URL);
        System.out.println("RETURN_URL: " + RETURN_URL);
        System.out.println("Valid config: " + isConfigValid());
        System.out.println("==================================");
    }
    
    /**
     * Check if the configuration is valid
     * @return true if all required fields are set
     */
    public static boolean isConfigValid() {
        return !MERCHANT_ID.isEmpty() && !SECRET_KEY.isEmpty();
    }
    
    /**
     * In th√¥ng tin c·∫•u h√¨nh ƒë·ªÉ debug
     */
    public static void printConfig() {
        System.out.println("=== VNPay Configuration ===");
        System.out.println("MERCHANT_ID: " + MERCHANT_ID);
        System.out.println("SECRET_KEY: " + (SECRET_KEY.isEmpty() ? "NOT SET" : "*****"));
        System.out.println("API_URL: " + API_URL);
        System.out.println("RETURN_URL: " + RETURN_URL);
        System.out.println("VERSION: " + VERSION);
        System.out.println("COMMAND: " + COMMAND);
        System.out.println("ORDER_TYPE: " + ORDER_TYPE);
        System.out.println("LOCALE: " + LOCALE);
        System.out.println("CURRENCY_CODE: " + CURRENCY_CODE);
        System.out.println("Config Valid: " + isConfigValid());
        System.out.println("==========================");
    }
    
    /**
     * T·∫°o file config.properties m·∫´u
     */
    public static void createSampleConfig() {
        System.out.println("=== SAMPLE CONFIG.PROPERTIES ===");
        System.out.println("# VNPay payment gateway settings");
        System.out.println("vnpay.merchant_id=YOUR_MERCHANT_ID_HERE");
        System.out.println("vnpay.secret_key=YOUR_SECRET_KEY_HERE");
        System.out.println("vnpay.api_url=https://sandbox.vnpayment.vn/paymentv2/vpcpay.html");
        System.out.println("vnpay.return_url=http://localhost:8080/vnpay-return");
        System.out.println("vnpay.version=2.1.0");
        System.out.println("vnpay.command=pay");
        System.out.println("vnpay.order_type=other");
        System.out.println("vnpay.locale=vn");
        System.out.println("vnpay.currency_code=VND");
        System.out.println("===============================");
    }
}
